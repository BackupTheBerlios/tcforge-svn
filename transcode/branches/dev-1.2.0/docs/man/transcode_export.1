.TH transcode export modules  1 "3th February 2008" "transcode_export(1)"
.SH NAME
transcode \- export modules collection
.SH SYNOPSIS
.B transcode -y module[,module[,module]] [other options]
.SH COPYRIGHT
\fBtranscode\fP is Copyright (C) 2001-2003 by Thomas Oestreich, 2003-2004 Tilmann
Bitterberg, 2004-2008 Transcode Team
.SH ENCODER PARAMETERS STRING

Module-dependent parameters can be passed to encoder using the -F transcode(1) option:

.RS 4
.B transcode \-F \fIcodec_string\fP
.RE

Those parameters tune the general behaviour of the export module. More specific settings can fine-tune the
export settings. Those settings are passed to export modules through \fBmodule options\fP or through
the \fBmodule configuration file\fP; both configuration file and options can be present at same time:
in that case, the options overrides the configuration file. Passing option strings to export modules
is done like to pass options to filter modules:
The syntax is:

.RS 4
.B transcode \-y vmod=options,amod=options
.RE

see transcode_filter(1) for full reference and examples.

The \-F parameter has different meanings for different export modules, as documented on section below.
.br

.SH ENCODER MODULES PARAMETERS

.TP
\fIffmpeg\fP:
  The codec String for the codec you want to encode. Example values are -F mpeg4 or -F mpeg1video or -F huffyuv. To get a list of valid codecs, use -F list

.TP
\fIim\fP:
  The name of the image format you want to export. Example values are '-F jpg' (default) or '-F png' or -F 'gif'. With -F jpg, -w gives quality in percent. With -F png, the first digit of -w gives compression level, the second one gives quality, so -w 95 selects best compression level (9) and 5 means PNG adaptive filtering.

.TP
\fIjpg\fP:
  The quality of the JPEG encode in percent. Example values are '-F 75' (default) or '-F 100'

.TP
\fImov\fP:
  Syntax: -F "<vcodec>,<acodec>[,<parameters>]"
    <vcodec> = Videocodec to encode with. Default: "mjpa"
    <acodec> = Audiocodec to encode with. Default: "ima4"
    <parameters> = A comma seperated list of parameters
                   to be passed to the codec.

Note: You can use "list" instead of a video/audiocodec or parameter to get a list of supported options.

.TP
\fImpeg\fP:
  Syntax: -F "<base-profile>[,<resizer-mode>[,user-profile]]"
    <base-profile> can be one of
      '1' = MPEG 1 (default)
      'b' = big MPEG 1 (experimental)
      'v' = VCD
      's' = SVCD
      '2' = MPEG2
      'd' = DVD compliant
    <resizer-mode> can be one of
       0 = disable resizer (default)
       1 = 352x288
       2 = 480x480
       3 = 480x576
       4 = 352x240
    <user-profile> is a filename of the profile file. You can either specify the absolute path to the file or if you transcode will look for it in the directory where you started transcode.

.TP
\fImpeg2enc\fP:
  Syntax: -F "<base-profile>[,<options_string>]"
    <base-profile> can be one of
      '0' = Generic MPEG1 (default)
      '1' = Standard VCD
      '2' = User VCD
      '3' = Generic MPEG2
      '4' = Standard SVCD
      '5' = User SVCD
      '6' = Manual parameter mode
      '8' = DVD
    <options_string> will be passed down to mpeg2enc untouched by transcode. Have a look at the manpage for mpeg2enc.

.TP
\fIraw\fP:
  The name of the image format to use for uncompressed video. Examples are I420 (YUV 4:2:0 planar), YV12 (the same thing with U and V reversed), or UYVY (YUV 4:2:2 packed). Use "-F help" to get a list of formats.

.SH EXPORT MODULES
If no module is specified through the \fI-y\fP option, transcode will use
the \fInull\fP module for both audio and video export. If a multiplex module
is given, by giving \fBthree\fP export module names instead the usual two,
transcode will use the new-style encode/multiplex modules (still under development,
see the encode and multiplex directories); if no multiplex module is given,
the traditional export modules will be used.
.br
To see what export modules are avalaible for your transcode installation, do a

.RS 4
.B ls -1 $( tcmodinfo -p )/export*.so
.RE

A complete transcode installation has the following export modules:
.RS
.\" Here starts the generated export part, produced by make-module-man.sed
.TP 4
\fBac3\fP \- (video) null | (audio) ac3
.br
This module has no compile-time dependencies.
At run-time ffmpeg must be present.
Support for this module is good.
.RS 8
Encodes audio (raw PCM) to AC3 via the ffmpeg binary.
.br
Supported processing formats: audio - PCM, video - none
.RE
.TP 4
\fBaf6\fP \- (video) Win32 dll | (audio) MPEG/AC3/PCM
.br
At compile-time libavifile must be available.
At run-time libavifile and win32codecs must be present.
Support for this module is good.
.RS 8
Interface to the avifile library which allows the use of win32codec on the linux-x86 platform.
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RGB YUV
.RE
.TP 4
\fBdivx5\fP \- (video) DivX 5.xx | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame (only for MPEG audio layer III) must be available.
At run-time divx4linux (new) and libdivxencore.so must be present.
Support for this module is good.
.RS 8
Encodes MPEG4 video using the closed-source binaries from divx.com to an AVI container.
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RGB YUV
.RE
.TP 4
\fBdv\fP \- (video) Digital Video | (audio) MPEG/AC3/PCM
.br
At compile-time libdv and libmp3lame (only for MPEG audio layer III) must be available.
At run-time libdv must be present.
Support for this module is good.
.RS 8
Encodes DV into an AVI container. DV is a codec developed by Sony and is often used in digital camcorders.
.br
Supported processing formats: audio - PCM AC3, video - RGB YUV
.RE
.TP 4
\fBdvraw\fP \- (video) Digital Video | (audio) PCM
.br
At compile-time libdv must be available.
At run-time libdv must be present.
Support for this module is good.
.RS 8
Encodes DV into a DV file. DV is a codec developed by Sony and is often used in digital camcorders. A raw DV file can be played back into the camcorder.
.br
Supported processing formats: audio - PCM, video - RAW (pass-through) RGB YUV YUV422
.RE
.TP 4
\fBffmpeg\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame (only for MPEG audio layer III) must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes many different formats to both AVI and raw. Supported are mpeg1video, mpeg2video, mpeg4, mjpeg, h263, h263p, wmv1, wmv2, rv10, msmpeg4, msmpeg4v2, huffyuv and dvvideo.
.br
Supported processing formats: audio RAW (pass-through) PCM AC3, video - RGB YUV YUV422
.RE
.TP 4
\fBim\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
At compile-time libImageMagick must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes image sequences by using the ImageMagick library. ImageMagick is able to handle a lot of different image formats such as png, jpg, miff, tiff, etc. Use -F to select the desired format.
.br
Supported processing formats: audio - RAW (pass-through) PCM, video - RGB YUV
.RE
.TP 4
\fBjpg\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
At compile-time libjpeg must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes jpg image sequences using libjpeg. Faster than ImageMagick. Use -F to select the compression quality.
.br
Supported processing formats: audio - RAW (pass-through) PCM, video - RGB YUV
.RE
.TP 4
\fBlame\fP \- (audio) MPEG 1/2
.br
At compile-time libmp3lame (only for MPEG audio layer III) must be available.
At run-time lame and sox must be present.
Support for this module is good.
.RS 8
An audio-only encoder which drives the lame binary. The tool sox is used to do resampling if required. Encodes to a MP3 file.
.br
Supported processing formats: audio - PCM, video - none
.RE
.TP 4
\fBlzo\fP \- (video) LZO real-time compression | (audio) MPEG/AC3/PCM
.br
At compile-time liblzo and libmp3lame (only for MPEG audio layer III) must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Encodes video using a loss-less real-time LZO codec. This codec is a homegrown invention of transcode and is intended as an intermediate storage format. MPlayer can playback LZO-based AVI files as well.
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RAW (pass-through) RGB YUV DV
.RE
.TP 4
\fBmov\fP \- (video) * | (audio) *
.br
At compile-time libquicktime must be available.
At run-time libquicktime must be present.
Support for this module is fair.
.RS 8
Interface to the quicktime library.
.br
Supported processing formats: audio - PCM, video - RAW (pass-through) RGB YUV YUV422 YUY2
.RE
.TP 4
\fBmp2\fP \- (video) null | (audio) MPEG 1/2
.br
This module has no compile-time dependencies.
At run-time ffmpeg and sox must be present.
Support for this module is good.
.RS 8
Encodes audio (raw PCM) to MPEG 1 Layer 2 audio aka mp2. Additionaly it can change the speed of the audio stream by a factor you can specify. See docs/export_mp2.txt.
.br
Supported processing formats: audio - PCM, video - none
.RE
.TP 4
\fBmp2enc\fP \- (audio) MPEG 1/2
.br
At compile-time mjpegtools must be available.
At run-time mp2enc must be present.
Support for this module is good.
.RS 8
Drives the mp2enc binary and writes an MP2 (MPEG1-Layer2) file. Useful for when encoding to SVCD to be multiplexed with mplex after encoding.
.br
Supported processing formats: audio - PCM, video - none
.RE
.TP 4
\fBmpeg2enc\fP \- (video) MPEG 1/2
.br
At compile-time mjpegtools must be available.
At run-time mpeg2enc must be present.
Support for this module is good.
.RS 8
Drives the mpeg2enc binary. mpeg2enc is a very feature rich MPEG encoder, have a look at its manpage. Encodes generic mpeg1, VCD, SVCD, MPEG2 and DVD type video.
.br
Supported processing formats: audio - none, video - RGB YUV
.RE
.TP 4
\fBnull\fP \- (video) null | (audio) null
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Data sink. Does nothing else than discarding data.
.br
Supported processing formats: audio - none, video - none
.RE
.TP 4
\fBogg\fP \- (video) null | (audio) ogg
.br
This module has no compile-time dependencies.
At run-time oggenc must be present.
Support for this module is good.
.RS 8
Drives the oggenc binary. Encodes an Ogg/Vorbis file. Resamples.
.br
Supported processing formats: audio - PCM, video - none
.RE
.TP 4
\fBppm\fP \- (video) PPM/PGM | (audio) MPEG/AC3/PCM
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Writes an image sequence of PGM or PPM files. PPM is an old format and there are several tools around to manipulate such files.
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RGB YUV
.RE
.TP 4
\fBpvm\fP \- (video) * | (audio) *
.br
At compile-time libpvm3 must be available.
At run-time pvm must be present.
Support for this module is good.
.RS 8
Meta module. It allows transcode to be used in a PVM cluster. See docs/export_pvm.txt
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RAW (pass-through) RGB YUV DV YUV422 YUY2
.RE
.TP 4
\fBraw\fP \- (video) * | (audio) MPEG/AC3/PCM
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Can write uncompressed streams to an AVI file as well as raw mpeg2 files in pass-through mode. The image format for uncompressed streams can be selected with -F (use -F help to see available formats).
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RAW (pass-through) RGB YUV DV YUV422
.RE
.TP 4
\fBtoolame\fP \- (audio) MPEG 1/2
.br
This module has no compile-time dependencies.
At run-time toolame and sox must be present.
Support for this module is good.
.RS 8
Drives the toolame binary to create MP2 audio tracks. Sox is used for resampling if requested.
.br
Supported processing formats: audio - PCM, video - none
.RE
.TP 4
\fBwav\fP \- (audio) WAVE PCM
.br
This module has no compile-time dependencies.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Creates WAVE PCM files with interleaved audio for stereo.
.br
Supported processing formats: audio - PCM, video - RAW (pass-through) RGB YUV
.RE
.TP 4
\fBxvid4\fP \- (video) XviD 1.0.x series (aka API 4.0) | (audio) MPEG/AC3/PCM
.br
At compile-time libmp3lame (only for MPEG audio layer III) must be available.
At run-time libxvidcore.so.4 must be present.
Support for this module is good.
.RS 8
Encodes MPEG4 video using the library available from xvid.org. Check out the library from xvidcvs using cvs -d :pserver:anonymous@cvs.xvid.org:/xvid co -rdev-api-4 xvidcore. There is also a tool available to create configuration files for this xvid version at http://zebra.fh-weingarten.de/transcode/xvid4conf. The output can either be an AVI file or a MPEG4 elementary stream (with -F raw).
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RGB YUV YUV422
.RE
.TP 4
\fByuv4mpeg\fP \- (video) YUV4MPEG2 | (audio) MPEG/AC3/PCM
.br
At compile-time mjpegtools must be available.
This module has no run-time dependencies.
Support for this module is good.
.RS 8
Writes the uncompressed raw YUV data in a YUV4MPEG format as used by the lav* and mjpeg* tools.
.br
Supported processing formats: audio - RAW (pass-through) PCM AC3, video - RGB YUV
.RE
.\" Here ends the generated export part, produced by make-module-man.sed
.RE
.IP

.PP
.SH AUTHORS
.B transcode
was written by Thomas Oestreich
.br
<ostreich@theorie.physik.uni-goettingen.de> with contributions from
many others.  See AUTHORS for details.
.PP
.SH SEE ALSO
.BR transcode (1),
.BR tcmodinfo (1),
.BR transcode_import(1),
.BR transcode_filter(1),
.br
